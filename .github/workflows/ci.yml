name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 5 1 * *'

jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.type }}
    runs-on: ${{ contains(matrix.arch, 'arm64') && 'windows-11-arm' || 'windows-2025' }}
    # don't run pull requests from local branches twice
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        type: [Debug, Release]

    defaults:
      run:
        shell: cmd

    steps:
      - uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          # make Windows packages like Clang available in MSYS
          path-type: inherit
          # install MSYS packages
          install: make autoconf automake libtool pkg-config

      - name: Remove Perl Strawberry installation
        # C:\Strawberry contains various MinGW libraries and binaries like pkg-config
        # that can get picked up by configure/CMake and don't necessarily behave
        # correctly when not using a MinGW environment, and more specifically we cannot
        # use MinGW gmake but must use MSYS make for correctly handling of Windows paths,
        # so we delete everything that could mess up our builds
        run: rmdir /S /Q C:\Strawberry

      - name: Install Winget Dependencies (ARM64)
        if: contains(matrix.arch, 'arm64')
        run: |
          Invoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.8.6/Microsoft.UI.Xaml.2.8.arm64.appx -OutFile $env:TEMP\Microsoft.UI.Xaml.2.8.arm64.appx
          Add-AppxPackage $env:TEMP\Microsoft.UI.Xaml.2.8.arm64.appx
        shell: pwsh
      
      - name: Install Winget
        if: contains(matrix.arch, 'arm64')
        run: Add-AppPackage https://aka.ms/GetWinGet
        shell: pwsh

      - name: Install Ninja
        run: winget install --accept-source-agreements --accept-package-agreements Ninja-build.Ninja

      - name: Install NASM
        run: winget install --accept-source-agreements --accept-package-agreements NASM

      - name: Upgrade LLVM
        run: winget install --accept-source-agreements --accept-package-agreements LLVM.LLVM

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build toolchain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          :: use msys2.cmd from setup-msys2 as Bash shell, as it doesn't have msys2_shell.cmd used normally by build.bat
          set "BASH=msys2 -c"
          build.bat --type ${{ env.type }}

      - name: Package release
        run: |
          tar -a -cf GNUstep-Windows-MSVC-${{matrix.arch}}-${{matrix.type}}.zip C:\GNUstep\${{matrix.arch}}\${{matrix.type}}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          path: GNUstep-Windows-MSVC-${{matrix.arch}}-${{matrix.type}}.zip
          name: GNUstep-Windows-MSVC-${{matrix.arch}}-${{matrix.type}}

  prerelease:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Update GitHub prerelease
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Latest Build"
          files: "**/GNUstep-Windows-MSVC-*.zip"
