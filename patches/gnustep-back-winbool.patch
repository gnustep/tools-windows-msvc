diff --git a/Source/win32/WIN32Server.m b/Source/win32/WIN32Server.m
index baab917..6e3fcd1 100644
--- a/Source/win32/WIN32Server.m
+++ b/Source/win32/WIN32Server.m
@@ -63,6 +63,21 @@
 
 #include <math.h>
 
+// category for accessing private ivars...
+@interface NSView (_GSPrivate_)
+
+- (struct _rFlagsType) rFlags;
+
+- (NSArray *) cursorRects;
+
+@end
+
+@interface GSTrackingRect (_GSPrivate_)
+
+- (NSRect) rectangle;
+
+@end
+
 // To update the cursor..
 static BOOL update_cursor = NO;
 static BOOL should_handle_cursor = NO;
@@ -187,7 +202,7 @@ BOOL CALLBACK LoadDisplayMonitorInfo(HMONITOR hMonitor,
 - (void) callback: (id)sender
 {
   MSG msg;
-  WINBOOL bRet; 
+  WinBOOL bRet; 
 //NSLog(@"Callback");
   while ((bRet = PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) != 0)
     { 
@@ -2942,9 +2957,9 @@ process_mouse_event(WIN32Server *svr, HWND hwnd, WPARAM wParam, LPARAM lParam,
 
       subview = [[gswin contentView] hitTest: eventLocation];
       
-      if (subview != nil && subview->_rFlags.valid_rects)
+      if (subview != nil && [subview rFlags].valid_rects)
 	{
-	  NSArray *tr = subview->_cursor_rects;
+	  NSArray *tr = [subview cursorRects];
 	  NSUInteger count = [tr count];
 
 	  // Loop through cursor rectangles
@@ -2966,7 +2981,7 @@ process_mouse_event(WIN32Server *svr, HWND hwnd, WPARAM wParam, LPARAM lParam,
 		  /*
 		   * Check for presence of point in rectangle.
 		   */
-		  now = NSMouseInRect(eventLocation, r->rectangle, NO);
+		  now = NSMouseInRect(eventLocation, [r rectangle], NO);
 
 		  // Mouse inside
 		  if (now)
diff --git a/Source/winlib/WIN32FontEnumerator.m b/Source/winlib/WIN32FontEnumerator.m
index def325b..29e0f7c 100644
--- a/Source/winlib/WIN32FontEnumerator.m
+++ b/Source/winlib/WIN32FontEnumerator.m
@@ -33,6 +33,39 @@
 #include "winlib/WIN32FontEnumerator.h"
 #include "windows.h"
 
+
+@interface WIN32FontEnumerator (_GSPrivate_)
+
+- (NSMutableDictionary *) allFontFamilies;
+
+- (NSArray *) allFontNames;
+
+- (void) setAllFontFamilies: (NSMutableDictionary *)d;
+
+- (void) setAllFontNames: (NSArray *)a;
+
+- (NSString *) fontName;
+
+- (const CGFloat *)matrix;
+
+- (NSString *) familyName;
+
+- (NSCharacterSet *) coveredCharacterSet;
+
+- (unsigned) numberOfGlyphs;
+
+- (CGFloat) ascender;
+
+- (CGFloat) descender;
+
+- (BOOL) isFixedPitch;
+
+- (BOOL) isBaseFont;
+
+- (CGFloat) xHeight;
+
+@end
+
 @implementation WIN32FontEnumerator
 
 int win32_font_weight(LONG tmWeight)
@@ -180,13 +213,13 @@ int CALLBACK fontfamilyenum(ENUMLOGFONTEXW *lpelfe, NEWTEXTMETRICEXW *lpntme,
 				     length: wcslen(lpelfe->elfFullName)];
 
   familyName = win32_font_family(fontName);
-  fontDefs = [enumer->allFontFamilies objectForKey: familyName];
+  fontDefs = [[enumer allFontFamilies] objectForKey: familyName];
   if (fontDefs == nil)
     {
       NSArray *fontDef;
 
       fontDefs = [NSMutableArray arrayWithCapacity: 10];
-      [enumer->allFontFamilies setObject: fontDefs forKey: familyName];
+      [[enumer allFontFamilies] setObject: fontDefs forKey: familyName];
       // FIXME: Need to loop over all fonts for this family
       //add_font(fontDefs, fontName, lpelfe, lpntme);
       //enumerate_font(fontDefs, familyName);
@@ -219,7 +252,7 @@ int CALLBACK fontfamilyenum(ENUMLOGFONTEXW *lpelfe, NEWTEXTMETRICEXW *lpntme,
 	nil];
       [fontDefs addObject: fontDef];
 
-      [(NSMutableArray*)(enumer->allFontNames) addObject: fontName];
+      [(NSMutableArray*)([enumer allFontNames]) addObject: fontName];
     }
 
   return 1;
@@ -236,8 +269,8 @@ int CALLBACK fontfamilyenum(ENUMLOGFONTEXW *lpelfe, NEWTEXTMETRICEXW *lpntme,
       int res;
       CREATE_AUTORELEASE_POOL(pool);
 
-      allFontFamilies = [[NSMutableDictionary alloc] init];
-      allFontNames  = [[NSMutableArray alloc] init];
+      [self setAllFontFamilies: [[NSMutableDictionary alloc] init]];
+      [self setAllFontNames: [[NSMutableArray alloc] init]];
 	
       hdc = GetDC(NULL);
       logfont.lfCharSet = DEFAULT_CHARSET;
diff --git a/Source/winlib/WIN32FontInfo.m b/Source/winlib/WIN32FontInfo.m
index 19c52ce..288ddac 100644
--- a/Source/winlib/WIN32FontInfo.m
+++ b/Source/winlib/WIN32FontInfo.m
@@ -41,6 +41,34 @@ NSString *win32_font_family(NSString *fontName);
 - (BOOL) setupAttributes;
 @end
 
+@interface WIN32FontInfo (_GSPrivate_)
+
+- (void) setFontName: (NSString *)n;
+
+- (NSString *) fontName;
+
+- (void) setMatrix: (const CGFloat *)m;
+
+- (const CGFloat *)matrix;
+
+- (NSString *) familyName;
+
+- (NSCharacterSet *) coveredCharacterSet;
+
+- (unsigned) numberOfGlyphs;
+
+- (CGFloat) ascender;
+
+- (CGFloat) descender;
+
+- (BOOL) isFixedPitch;
+
+- (BOOL) isBaseFont;
+
+- (CGFloat) xHeight;
+
+@end
+
 @implementation WIN32FontInfo
 
 - initWithFontName: (NSString*)name
@@ -54,8 +82,8 @@ NSString *win32_font_family(NSString *fontName);
     }
 
   [super init];
-  ASSIGN(fontName, name);
-  memcpy(matrix, fmatrix, sizeof(matrix));
+  [self setFontName: name]; // ASSIGN(fontName, name);
+  [self setMatrix: fmatrix]; // memcpy(matrix, fmatrix, sizeof(matrix));
 
   if (![self setupAttributes])
     {
diff --git a/configure b/configure
index cd97dc9..5158905 100755
--- a/configure
+++ b/configure
@@ -5932,7 +5932,7 @@ else
 fi
 
 if test "$have_gdi32" = yes; then
-  WIN32_LIBS="-lgdi32 -lm"
+  WIN32_LIBS="-lgdi32"
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for main in -lmsimg32" >&5
 $as_echo_n "checking for main in -lmsimg32... " >&6; }
diff --git a/configure.ac b/configure.ac
index 88a80f5..60ca76b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -393,7 +393,7 @@ AC_CHECK_LIB(X11, XInternAtoms,
 #--------------------------------------------------------------------
 AC_CHECK_LIB(gdi32, main, have_gdi32=yes, have_gdi32=no)
 if test "$have_gdi32" = yes; then
-  WIN32_LIBS="-lgdi32 -lm"
+  WIN32_LIBS="-lgdi32"
 fi
 AC_CHECK_LIB(msimg32, main, have_msimg32=yes, have_msimg32=no)
 if test "$have_msimg32" = yes; then
